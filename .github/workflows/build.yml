name: build
on:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: build
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get version
        run: |
            $version = select-xml -path "Directory.Build.props" -xpath "//PropertyGroup//Version" | Select-Object  -ExpandProperty Node | Select-Object -ExpandProperty '#text'
            echo "VERSION=$version" >> $env:GITHUB_ENV

      - name: setup dotnet
        uses: actions/setup-dotnet@v3

      - name: dotnet restore
        run: dotnet restore
        
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'microsoft'
          java-version: '17'
          java-package: jdk
    
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarQube scanner
        if: ${{ steps.cache-sonar-scanner.outputs.cache-hit != 'true' }}
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
        
      - name: Build and analyze
        if: ${{ !github.event.pull_request.head.repo.fork }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: powershell
        run: |
          mkdir .sonarqube
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"FrankvdStam_SoulSplitter_AYT9tJW7QlZ0fhD27xsa" /v:${{ env.VERSION }}  /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.cs.opencover.reportsPaths=tests/**/*.xml
          dotnet build -c release
          dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=opencover
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
      - name: Run rust tests
        run: cargo test