name: build
on:  push
jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:

        #Setup Shallow clone
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
       
    #  - name: Install component on windows 2022
    #    shell: pwsh
    #    run: |
    #      Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
    #      $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
    #      $componentsToAdd = @(
    #        "Microsoft.Net.Component.4.6.1.SDK",
    #        "Microsoft.Net.Component.4.6.1.TargetingPack"
    #      )
    #      [string]$workloadArgs = $componentsToAdd | ForEach-Object {" --add " +  $_}
    #      $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
    #      $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
    #      if ($process.ExitCode -eq 0)
    #      {
    #          Write-Host "components have been successfully added"
    #      }
    #      else
    #      {
    #          Write-Host "components were not installed"
    #          exit 1
    #      }


        #Setup Setup dotnet & restore dependencies.
      - name: setup dotnet
        uses: actions/setup-dotnet@v3

    #  - name: setup-msbuild
    #    uses: microsoft/setup-msbuild@v1.1

      - name: dotnet restore
        run: dotnet restore

    #    #for old framework projects
    #  - uses: nuget/setup-nuget@v1
  
    #  - name: nuget restore
    #    run: nuget restore SoulSplitter.sln

        #Setup sonarqube dependencies, run scan
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
     
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"FrankvdStam_SoulSplitter_AYT9tJW7QlZ0fhD27xsa" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.exclusions=src/cli/Program.cs
          dotnet build src\SoulSplitter\SoulSplitter.csproj -t:rebuild -property:Configuration=Debug -property:Platform=x64
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Run tests
        run: dotnet test
